{"ast":null,"code":"var _jsxFileName = \"/Users/jim/Source/CD/JavaScript/D3/D3-playground/src/components/GridCharts/InteractiveGrid/index.jsx\";\nimport React, { useEffect } from 'react';\nimport * as d3 from 'd3';\n\nfunction gridData(size) {\n  let data = [];\n  let xpos = 1;\n  let ypos = 1;\n  let click = 0;\n\n  for (let row = 0; row < 10; row++) {\n    data.push([]);\n\n    for (let column = 0; column < 10; column++) {\n      data[row].push({\n        x: xpos,\n        y: ypos,\n        width: size,\n        height: size,\n        click: Math.random()\n      });\n      xpos += size;\n    }\n\n    xpos = 1;\n    ypos += size;\n  }\n\n  return data;\n}\n\nconst InteractiveGrid = ({\n  squares,\n  dimensions,\n  margin\n}) => {\n  const width = dimensions - margin * 2;\n  const height = dimensions - margin * 2;\n  const gridSize = Math.floor(width / squares);\n  const data = gridData(gridSize);\n  useEffect(() => {\n    const chart = d3.select('#createGrid').attr('width', width + margin * 2).attr('height', height + margin * 2).append('g').attr('transform', \"translate(\".concat(margin, \",\").concat(margin, \")\"));\n    const row = chart.selectAll('.row').data(data, d => d).enter().append('g').attr('class', 'row');\n    const column = row.selectAll('.square').data(d => d).enter().append('rect').attr('class', 'square').attr('x', d => d.x).attr('y', d => d.y).attr('width', d => d.width).attr('height', d => d.height).style('fill', d => d3.interpolateBlues(d.click)).style('stroke', '#222').on('mouseover', function (d) {\n      d.click += 0.2;\n      d3.select(this).style('fill', d => d3.interpolateBlues(d.click));\n    }).on('click', function (d) {\n      d.click = 0;\n      d3.select(this).style('fill', d => d3.interpolateBlues(d.click));\n    });\n  });\n  return React.createElement(\"svg\", {\n    id: \"createGrid\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 72\n    },\n    __self: this\n  });\n};\n\nexport default InteractiveGrid;","map":{"version":3,"sources":["/Users/jim/Source/CD/JavaScript/D3/D3-playground/src/components/GridCharts/InteractiveGrid/index.jsx"],"names":["React","useEffect","d3","gridData","size","data","xpos","ypos","click","row","push","column","x","y","width","height","Math","random","InteractiveGrid","squares","dimensions","margin","gridSize","floor","chart","select","attr","append","selectAll","d","enter","style","interpolateBlues","on"],"mappings":"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","sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from 'd3';\n\nfunction gridData(size) {\n  let data = [];\n  let xpos = 1;\n  let ypos = 1;\n  let click = 0;\n\n  for (let row = 0; row < 10; row++) {\n    data.push([]);\n\n    for (let column = 0; column < 10; column++) {\n      data[row].push({\n        x: xpos,\n        y: ypos,\n        width: size,\n        height: size,\n        click: Math.random(),\n      });\n      xpos += size;\n    }\n    xpos = 1;\n    ypos += size;\n  }\n  return data;\n}\n\nconst InteractiveGrid = ({ squares, dimensions, margin }) => {\n  const width = dimensions - margin * 2;\n  const height = dimensions - margin * 2;\n  const gridSize = Math.floor(width / squares);\n  const data = gridData(gridSize);\n\n  useEffect(() => {\n    const chart = d3\n      .select('#createGrid')\n      .attr('width', width + margin * 2)\n      .attr('height', height + margin * 2)\n      .append('g')\n      .attr('transform', `translate(${margin},${margin})`);\n\n    const row = chart\n      .selectAll('.row')\n      .data(data, d => d)\n      .enter()\n      .append('g')\n      .attr('class', 'row');\n\n    const column = row\n      .selectAll('.square')\n      .data(d => d)\n      .enter()\n      .append('rect')\n      .attr('class', 'square')\n      .attr('x', d => d.x)\n      .attr('y', d => d.y)\n      .attr('width', d => d.width)\n      .attr('height', d => d.height)\n      .style('fill', d => d3.interpolateBlues(d.click))\n      .style('stroke', '#222')\n      .on('mouseover', function(d) {\n        d.click += 0.2;\n        d3.select(this).style('fill', d => d3.interpolateBlues(d.click));\n      })\n      .on('click', function(d) {\n        d.click = 0;\n        d3.select(this).style('fill', d => d3.interpolateBlues(d.click));\n      });\n  });\n\n  return <svg id=\"createGrid\" />;\n};\n\nexport default InteractiveGrid;\n"]},"metadata":{},"sourceType":"module"}