{"ast":null,"code":"var _jsxFileName = \"/Users/jim/Source/CD/JavaScript/D3/D3-playground/src/components/Transitions/MovingLetters/index.jsx\";\nimport React, { useEffect } from 'react';\nimport * as d3 from 'd3';\nimport './style.css';\n\nconst MovingLetters = () => {\n  const width = 975;\n  const t = d3.transition().duration(750);\n  let data;\n  let chart;\n\n  function randomLetters() {\n    data = d3.shuffle('abcdefghijklmnopqrstuvwxyz'.split('')).slice(0, Math.floor(6 + Math.random() * 20)).sort();\n  }\n\n  function assignData() {\n    randomLetters();\n    chart.selectAll('text').data(data, d => d).join(enter => enter.append('text').attr('fill', 'green').attr('x', (d, i) => i * 16).attr('y', -30).text(d => d).call(enter => enter.transition(t).attr('y', 0)), update => update.attr('fill', 'black').attr('y', 0).call(update => update.transition(t).attr('x', (d, i) => i * 16)), exit => exit.attr('fill', 'brown').call(exit => exit.transition(t).attr('y', 30).remove()));\n  }\n\n  useEffect(() => {\n    chart = d3.select('#MovingLetters').attr('width', width).attr('height', 33).attr('viewBox', \"0 -20 \".concat(width, \" 33\"));\n    assignData();\n  });\n  return React.createElement(\"div\", {\n    className: \"movingText\",\n    id: \"movingText\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58\n    },\n    __self: this\n  }, React.createElement(\"svg\", {\n    id: \"MovingLetters\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    type: \"button\",\n    onClick: assignData,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, \"change text\"));\n};\n\nexport default MovingLetters;","map":{"version":3,"sources":["/Users/jim/Source/CD/JavaScript/D3/D3-playground/src/components/Transitions/MovingLetters/index.jsx"],"names":["React","useEffect","d3","MovingLetters","width","t","transition","duration","data","chart","randomLetters","shuffle","split","slice","Math","floor","random","sort","assignData","selectAll","d","join","enter","append","attr","i","text","call","update","exit","remove","select"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAO,KAAKC,EAAZ,MAAoB,IAApB;AACA,OAAO,aAAP;;AAEA,MAAMC,aAAa,GAAG,MAAM;AAC1B,QAAMC,KAAK,GAAG,GAAd;AACA,QAAMC,CAAC,GAAGH,EAAE,CAACI,UAAH,GAAgBC,QAAhB,CAAyB,GAAzB,CAAV;AACA,MAAIC,IAAJ;AACA,MAAIC,KAAJ;;AAEA,WAASC,aAAT,GAAyB;AACvBF,IAAAA,IAAI,GAAGN,EAAE,CACNS,OADI,CACI,6BAA6BC,KAA7B,CAAmC,EAAnC,CADJ,EAEJC,KAFI,CAEE,CAFF,EAEKC,IAAI,CAACC,KAAL,CAAW,IAAID,IAAI,CAACE,MAAL,KAAgB,EAA/B,CAFL,EAGJC,IAHI,EAAP;AAID;;AAED,WAASC,UAAT,GAAsB;AACpBR,IAAAA,aAAa;AACbD,IAAAA,KAAK,CACFU,SADH,CACa,MADb,EAEGX,IAFH,CAEQA,IAFR,EAEcY,CAAC,IAAIA,CAFnB,EAGGC,IAHH,CAIIC,KAAK,IACHA,KAAK,CACFC,MADH,CACU,MADV,EAEGC,IAFH,CAEQ,MAFR,EAEgB,OAFhB,EAGGA,IAHH,CAGQ,GAHR,EAGa,CAACJ,CAAD,EAAIK,CAAJ,KAAUA,CAAC,GAAG,EAH3B,EAIGD,IAJH,CAIQ,GAJR,EAIa,CAAC,EAJd,EAKGE,IALH,CAKQN,CAAC,IAAIA,CALb,EAMGO,IANH,CAMQL,KAAK,IAAIA,KAAK,CAAChB,UAAN,CAAiBD,CAAjB,EAAoBmB,IAApB,CAAyB,GAAzB,EAA8B,CAA9B,CANjB,CALN,EAYII,MAAM,IACJA,MAAM,CACHJ,IADH,CACQ,MADR,EACgB,OADhB,EAEGA,IAFH,CAEQ,GAFR,EAEa,CAFb,EAGGG,IAHH,CAGQC,MAAM,IAAIA,MAAM,CAACtB,UAAP,CAAkBD,CAAlB,EAAqBmB,IAArB,CAA0B,GAA1B,EAA+B,CAACJ,CAAD,EAAIK,CAAJ,KAAUA,CAAC,GAAG,EAA7C,CAHlB,CAbN,EAiBII,IAAI,IACFA,IAAI,CAACL,IAAL,CAAU,MAAV,EAAkB,OAAlB,EAA2BG,IAA3B,CAAgCE,IAAI,IAClCA,IAAI,CACDvB,UADH,CACcD,CADd,EAEGmB,IAFH,CAEQ,GAFR,EAEa,EAFb,EAGGM,MAHH,EADF,CAlBN;AAyBD;;AAED7B,EAAAA,SAAS,CAAC,MAAM;AACdQ,IAAAA,KAAK,GAAGP,EAAE,CACP6B,MADK,CACE,gBADF,EAELP,IAFK,CAEA,OAFA,EAESpB,KAFT,EAGLoB,IAHK,CAGA,QAHA,EAGU,EAHV,EAILA,IAJK,CAIA,SAJA,kBAIoBpB,KAJpB,SAAR;AAMAc,IAAAA,UAAU;AACX,GARQ,CAAT;AAUA,SACE;AAAK,IAAA,SAAS,EAAC,YAAf;AAA4B,IAAA,EAAE,EAAC,YAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAK,IAAA,EAAE,EAAC,eAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAEE;AAAQ,IAAA,IAAI,EAAC,QAAb;AAAsB,IAAA,OAAO,EAAEA,UAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAFF,CADF;AAQD,CA5DD;;AA8DA,eAAef,aAAf","sourcesContent":["import React, { useEffect } from 'react';\nimport * as d3 from 'd3';\nimport './style.css';\n\nconst MovingLetters = () => {\n  const width = 975;\n  const t = d3.transition().duration(750);\n  let data;\n  let chart;\n\n  function randomLetters() {\n    data = d3\n      .shuffle('abcdefghijklmnopqrstuvwxyz'.split(''))\n      .slice(0, Math.floor(6 + Math.random() * 20))\n      .sort();\n  }\n\n  function assignData() {\n    randomLetters();\n    chart\n      .selectAll('text')\n      .data(data, d => d)\n      .join(\n        enter =>\n          enter\n            .append('text')\n            .attr('fill', 'green')\n            .attr('x', (d, i) => i * 16)\n            .attr('y', -30)\n            .text(d => d)\n            .call(enter => enter.transition(t).attr('y', 0)),\n        update =>\n          update\n            .attr('fill', 'black')\n            .attr('y', 0)\n            .call(update => update.transition(t).attr('x', (d, i) => i * 16)),\n        exit =>\n          exit.attr('fill', 'brown').call(exit =>\n            exit\n              .transition(t)\n              .attr('y', 30)\n              .remove()\n          )\n      );\n  }\n\n  useEffect(() => {\n    chart = d3\n      .select('#MovingLetters')\n      .attr('width', width)\n      .attr('height', 33)\n      .attr('viewBox', `0 -20 ${width} 33`);\n\n    assignData();\n  });\n\n  return (\n    <div className=\"movingText\" id=\"movingText\">\n      <svg id=\"MovingLetters\" />\n      <button type=\"button\" onClick={assignData}>\n        change text\n      </button>\n    </div>\n  );\n};\n\nexport default MovingLetters;\n"]},"metadata":{},"sourceType":"module"}